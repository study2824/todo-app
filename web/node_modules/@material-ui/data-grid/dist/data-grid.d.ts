import { ReactElement, RefObject, ElementType, Dispatch, MutableRefObject, Context, HTMLAttributes, ReactNode, ForwardRefExoticComponent, RefAttributes, FC, NamedExoticComponent, Reducer, Component, MouseEvent, MemoExoticComponent } from 'react';
import { OverridableComponent } from '@material-ui/core/OverridableComponent';
import { OutputSelector } from 'reselect';

declare type RowsProp = RowData[];
declare type Rows = RowModel[];
/**
 * The key value object representing the data of a row.
 */
interface RowData extends ObjectWithId {
    [key: string]: any;
}
/**
 * The type of Id supported by the grid.
 */
declare type RowId = string | number;
interface ObjectWithId {
    id: RowId;
}
/**
 * The internal model of a row containing its state and data.
 */
interface RowModel {
    id: RowId;
    data: RowData;
}
/**
 * An helper function allowing to create [[RowModel]] from [[RowData]].
 *
 * @param rowData Row as [[RowData]].
 * @returns A row as [[RowModel]].
 */
declare function createRowModel(rowData: RowData): RowModel;

/**
 * The Row API interface that is available in the grid [[apiRef]].
 */
interface RowApi {
    /**
     * Get the full set of rows as [[Rows]].
     * @returns [[Rows]]
     */
    getRowModels: () => Rows;
    /**
     * Get the total number of rows in the grid.
     */
    getRowsCount: () => number;
    /**
     * Return the list of row Ids.
     */
    getAllRowIds: () => RowId[];
    /**
     * Set a new set of Rows.
     * @param rows
     */
    setRowModels: (rows: Rows) => void;
    /**
     * Update any properties of the current set of Rows.
     * @param updates
     */
    updateRowModels: (updates: Partial<RowModel>[]) => void;
    /**
     * Update any properties of the current set of RowData[].
     * @param updates
     */
    updateRowData: (updates: RowData[]) => void;
    /**
     * Get the RowId of a row at a specific position.
     * @param index
     */
    getRowIdFromRowIndex: (index: number) => RowId;
    /**
     * Get the row index of a row with a given id.
     * @param id
     */
    getRowIndexFromId: (id: RowId) => number;
    /**
     * Get the [[RowModel]] of a given rowId.
     * @param id
     */
    getRowFromId: (id: RowId) => RowModel;
}

/**
 * The cell value type.
 */
declare type CellValue = string | number | boolean | Date | null | undefined | object;
/**
 * The coordinates of cell represented by their row and column indexes.
 */
interface CellIndexCoordinates {
    colIndex: number;
    rowIndex: number;
}

/**
 * Object passed as parameter in the column [[ColDef]] cell renderer.
 */
interface CellParams {
    /**
     * The HTMLElement that triggered the event
     */
    element?: HTMLElement;
    /**
     * The column field of the cell that triggered the event
     */
    field: string;
    /**
     * The cell value.
     */
    value: CellValue;
    /**
     * A function that let you get data from other columns.
     * @param field
     */
    getValue: (field: string) => CellValue;
    /**
     * The full set of data of the row that the current cell belongs to.
     */
    data: RowData;
    /**
     * The row model of the row that the current cell belongs to.
     */
    rowModel: RowModel;
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: any;
    /**
     * The row index of the row that the current cell belongs to.
     */
    rowIndex?: number;
    /**
     * ApiRef that let you manipulate the grid.
     */
    api: any;
}
/**
 * Alias of CellParams.
 */
declare type ValueGetterParams = CellParams;
/**
 * Alias of CellParams.
 */
declare type ValueFormatterParams = CellParams;

/**
 * Alias of CellParams.
 */
declare type CellClassParams = CellParams;
/**
 * A function used to process cellClassParams.
 */
declare type CellClassFn = (params: CellClassParams) => string | string[];
/**
 * The union type representing the [[ColDef]] cell class type.
 */
declare type CellClassNamePropType = string | string[] | CellClassFn;
/**
 * An object representing the cell class rules.
 */
declare type CellClassRules = {
    [cssClass: string]: ((params: CellClassParams) => boolean) | boolean;
};

/**
 * Object passed as parameter in the column [[ColDef]] header renderer.
 */
interface ColParams {
    /**
     * The column field of the column that triggered the event
     */
    field: string;
    /**
     * The column of the current header component.
     */
    colDef: any;
    /**
     * The column index of the current header component.
     */
    colIndex: number;
    /**
     * API ref that let you manipulate the grid.
     */
    api: any;
}

declare type SortDirection = 'asc' | 'desc' | null | undefined;
declare type FieldComparatorList = {
    field: string;
    comparator: ComparatorFn;
}[];
/**
 * The type of the sort comparison function.
 */
declare type ComparatorFn = (v1: CellValue, v2: CellValue, cellParams1: CellParams, cellParams2: CellParams) => number;
/**
 * Object that represents the column sorted data, part of the [[SortModel]].
 */
interface SortItem {
    /**
     * The column field identifier.
     */
    field: string;
    /**
     * The direction of the column that the grid should sort.
     */
    sort: SortDirection;
}
/**
 * The model used for sorting the grid.
 */
declare type SortModel = SortItem[];

declare type NativeColTypes = 'string' | 'number' | 'date' | 'dateTime';
declare type ColType = NativeColTypes | string;

/**
 * Alignement used in position elements in Cells.
 */
declare type Alignement = 'left' | 'right' | 'center';
/**
 * Column Definition interface.
 */
interface ColDef {
    /**
     * The column identifier. It's used to map with [[RowData]] values.
     */
    field: string;
    /**
     * The title of the column rendered in the column header cell.
     */
    headerName?: string;
    /**
     * The description of the column rendered as tooltip if the column header name is not fully displayed.
     */
    description?: string;
    /**
     * Set the width of the column.
     * @default 100
     */
    width?: number;
    /**
     * If `true`, hide the column.
     * @default false;
     */
    hide?: boolean;
    /**
     * If `true`, the column is sortable.
     * @default true
     */
    sortable?: boolean;
    /**
     * If `true`, the column is resizable.
     * @default true
     */
    resizable?: boolean;
    /**
     * A comparator function used to sort rows.
     */
    sortComparator?: ComparatorFn;
    /**
     * Sort the rows in a specific direction.
     */
    sortDirection?: SortDirection;
    /**
     * If multiple columns are sorted, this setting allows to order the columns sorting sequence.
     */
    sortIndex?: number;
    /**
     * Type allows to merge this object with a default definition [[ColDef]].
     * @default string
     */
    type?: ColType;
    /**
     * Allows to align the column values in cells.
     */
    align?: Alignement;
    /**
     * Function that allows to get a specific data instead of field to render in the cell.
     * @param params
     */
    valueGetter?: (params: ValueGetterParams) => CellValue;
    /**
     * Function that allows to apply a formatter before rendering its value.
     * @param params
     */
    valueFormatter?: (params: ValueFormatterParams) => CellValue;
    /**
     * Class name that will be added in cells for that column.
     */
    cellClassName?: CellClassNamePropType;
    /**
     * Set of CSS class rules that will be dynamically applied on cells.
     */
    cellClassRules?: CellClassRules;
    /**
     * Allows to override the component rendered as cell for this column.
     * @param params
     */
    renderCell?: (params: CellParams) => ReactElement;
    /**
     * Class name that will be added in the column header cell.
     */
    headerClassName?: string | string[];
    /**
     * Allows to render a component in the column header cell.
     * @param params
     */
    renderHeader?: (params: ColParams) => ReactElement;
    /**
     * Header cell element alignment.
     */
    headerAlign?: Alignement;
    /**
     * Toggle the visibility of the sort icons.
     */
    hideSortIcons?: boolean;
    /**
     * Allows to disable the click event in cells.
     */
    disableClickEventBubbling?: boolean;
}
declare type Columns = ColDef[];
declare type ColTypeDef = Omit<ColDef, 'field'> & {
    extendType?: NativeColTypes;
};
/**
 * Meta Info about columns.
 */
interface ColumnsMeta {
    totalWidth: number;
    positions: number[];
}
declare type ColumnLookup = {
    [field: string]: ColDef;
};
interface InternalColumns {
    all: Columns;
    visible: Columns;
    meta: ColumnsMeta;
    hasColumns: boolean;
    hasVisibleColumns: boolean;
    lookup: ColumnLookup;
}
declare const getInitialColumnsState: () => InternalColumns;

/**
 * The column API interface that is available in the grid [[apiRef]].
 */
interface ColumnApi {
    /**
     * Retrieve a column from its field.
     * @param field
     * @returns [[ColDef]]
     */
    getColumnFromField: (field: string) => ColDef;
    /**
     * Get all the [[Columns]].
     * @returns An array of [[ColDef]].
     */
    getAllColumns: () => Columns;
    /**
     * Get the currently visible columns.
     * @returns An array of [[ColDef]].
     */
    getVisibleColumns: () => Columns;
    /**
     * Get the columns meta data.
     * @returns [[ColumnsMeta]]
     */
    getColumnsMeta: () => ColumnsMeta;
    /**
     * Get the index position of the column in the array of [[ColDef]].
     * @param field
     */
    getColumnIndex: (field: string, useVisibleColumns?: boolean) => number;
    /**
     * Get the column left position in pixel relative to the left grid inner border.
     * @param field
     */
    getColumnPosition: (field: string) => number;
    /**
     * Allows to update a column [[ColDef]] model.
     * @param col [[ColDef]]
     */
    updateColumn: (col: ColDef) => void;
    /**
     * Allows to batch update multiple columns at the same time.
     * @param cols [[ColDef[]]]
     * @param resetState
     */
    updateColumns: (cols: ColDef[], resetColumnState?: boolean) => void;
}

interface CursorCoordinates {
    x: number;
    y: number;
}
/**
 * The column reorder API interface that is available in the grid [[apiRef]].
 */
interface ColumnReorderApi {
    /**
     * Column item drag start event handler.
     * @param column
     * @param target
     * @returns void
     */
    onColItemDragStart: (column: ColDef, target: HTMLElement) => void;
    /**
     * Column header drag over event handler.
     * @param event
     * @param ref
     * @returns void
     */
    onColHeaderDragOver: (event: Event, ref: RefObject<HTMLElement>) => void;
    /**
     * Column item drag over event handler.
     * @param column
     * @param coordinates
     * @returns void
     */
    onColItemDragOver: (column: ColDef, coordinates: CursorCoordinates) => void;
    /**
     * Column item drag enter event handler.
     * @param event
     * @returns void
     */
    onColItemDragEnter: (event: Event) => void;
}

/**
 * Object passed as parameter as the row selected event handler.
 */
interface RowSelectedParams {
    /**
     * The row data of the row that triggers the event.
     */
    data: RowData;
    /**
     * The selected state of the row that triggers the event.
     */
    isSelected: boolean;
}

/**
 * Object passed as parameter as the selection change event handler.
 */
interface SelectionChangeParams {
    /**
     * The set of rows that had their selection state change.
     */
    rowIds: RowId[];
}

/**
 * The selection API interface that is available in the grid [[apiRef]].
 */
interface SelectionApi {
    /**
     * Toggle the row selected state.
     * @param id
     * @param allowMultiple Default: false = deselect other rows if isSelected is true
     * @param isSelected Default true
     */
    selectRow: (id: RowId, allowMultiple?: boolean, isSelected?: boolean) => void;
    /**
     * Batch toggle rows selected state.
     * @param ids
     * @param isSelected default true
     * @param deselectOtherRows default: false
     */
    selectRows: (ids: RowId[], isSelected?: boolean, deselectOtherRows?: boolean) => void;
    /**
     * Get an array of selected rows.
     */
    getSelectedRows: () => RowModel[];
    /**
     * Callback fired after a row is selected.
     * @param handler
     */
    onRowSelected: (handler: (param: RowSelectedParams) => void) => () => void;
    /**
     * Callback fired after one or multiple rows had a selection state change.
     * @param handler
     */
    onSelectionChange: (handler: (param: SelectionChangeParams) => void) => () => void;
}

/**
 * Object passed as parameter of the column sorted event.
 */
interface SortModelParams {
    /**
     * The sort model used to sort the grid.
     */
    sortModel: SortModel;
    /**
     * The full set of columns.
     */
    columns: Columns;
    /**
     * Api that let you manipulate the grid.
     */
    api: any;
}

/**
 * The sort API interface that is available in the grid [[apiRef]].
 */
interface SortApi {
    /**
     * Get the sort model currently applied to the grid.
     */
    getSortModel: () => SortModel;
    /**
     * Apply the current sorting model to the rows.
     */
    applySorting: () => void;
    /**
     * Set the sort model and trigger the sorting of rows.
     * @param model
     */
    setSortModel: (model: SortModel) => void;
    /**
     * Callback fired when the column sorting changed before the grid has sorted its rows.
     * @param handler
     */
    onSortModelChange: (handler: (param: SortModelParams) => void) => () => void;
}

declare const FeatureModeConstant: {
    client: "client";
    server: "server";
};
declare type FeatureMode = 'client' | 'server';

/**
 * Object passed as parameter of the page change event handler.
 */
interface PageChangeParams {
    /**
     * The new page.
     */
    page: number;
    /**
     * The total number of pages.
     */
    pageCount: number;
    /**
     * The number of rows in a page.
     */
    pageSize: number;
    /**
     * The total number of rows.
     */
    rowCount: number;
    /**
     * The pagination mode set in options.
     * 'client' means that the pagination is handled on the client-side.
     * 'server' means that the pagination is handled on the server-side.
     */
    paginationMode: FeatureMode;
}

/**
 * The pagination API interface that is available in the grid [[apiRef]].
 */
interface PaginationApi {
    /**
     * Set the displayed page.
     * @param page
     */
    setPage: (page: number) => void;
    /**
     * Set the number of rows in one page.
     * @param pageSize
     */
    setPageSize: (pageSize: number) => void;
    /**
     * Callback fired after a new page has been displayed.
     * @param handler
     */
    onPageChange: (handler: (param: PageChangeParams) => void) => () => void;
    /**
     * Callback fired after the page size was changed.
     * @param handler
     */
    onPageSizeChange: (handler: (param: PageChangeParams) => void) => () => void;
}

interface Logger {
    debug: (...args: any[]) => void;
    info: (...args: any[]) => void;
    warn: (...args: any[]) => void;
    error: (...args: any[]) => void;
}
declare type LoggerFactoryFn = (name: string) => Logger;
declare function useLoggerFactory(customLogger?: Logger | LoggerFactoryFn, logLevel?: string | boolean): void;
declare function useLogger(name: string): Logger;

declare type ColumnTypesRecord = Record<ColType, ColTypeDef>;

/**
 * Object passed as parameter in the column [[ColDef]] cell renderer.
 */
interface RowParams {
    /**
     * The HTMLElement that triggered the event
     */
    element?: HTMLElement;
    /**
     * A function that let you get data from other columns.
     * @param field
     */
    getValue: (field: string) => CellValue;
    /**
     * The full set of data of the row that the current cell belongs to.
     */
    data: RowData;
    /**
     * The row model of the row that the current cell belongs to.
     */
    rowModel: RowModel;
    /**
     * All grid columns.
     */
    columns: any;
    /**
     * The row index of the row that the current cell belongs to.
     */
    rowIndex: number;
    /**
     * ApiRef that let you manipulate the grid.
     */
    api: any;
}

/**
 * Set of icons used in the grid component UI.
 */
interface IconsOptions {
    /**
     * Icon displayed on the side of the column header title when sorted in Ascending order.
     */
    columnSortedAscending?: ElementType;
    /**
     * Icon displayed on the side of the column header title when sorted in Descending order.
     */
    columnSortedDescending?: ElementType;
    /**
     * Icon displayed in between 2 column headers that allows to resize the column header.
     */
    columnResize?: ElementType<{
        className: string;
    }>;
}
/**
 * Grid options react prop, containing all the setting for the grid.
 */
interface GridOptions {
    /**
     * If `true`, the grid height is dynamic and follow the number of rows in the grid.
     * @default false
     */
    autoHeight?: boolean;
    /**
     * Set the height in pixel of a row in the grid.
     * @default 52
     */
    rowHeight: number;
    /**
     * Set the height in pixel of the column headers in the grid.
     * @default 56
     */
    headerHeight: number;
    /**
     * Set the height/width of the grid inner scrollbar.
     * @default 15
     */
    scrollbarSize: number;
    /**
     * Number of columns rendered outside the grid viewport.
     * @default 2
     */
    columnBuffer: number;
    /**
     * If `true`, multiple selection using the CTRL or CMD key is disabled.
     * @default false
     */
    disableMultipleSelection?: boolean;
    /**
     * If `true`, sorting with multiple columns is disabled.
     * @default false
     */
    disableMultipleColumnsSorting?: boolean;
    /**
     * If `true`, resizing columns is disabled.
     * @default false
     */
    disableColumnResize?: boolean;
    /**
     * If `true`, reordering columns is disabled.
     * @default false
     */
    disableColumnReorder?: boolean;
    /**
     * If `true`, the right border of the cells are displayed.
     * @default false
     */
    showCellRightBorder?: boolean;
    /**
     * If `true`, the right border of the column headers are displayed.
     * @default false
     */
    showColumnRightBorder?: boolean;
    /**
     * If `true`, rows will not be extended to fill the full width of the grid container.
     * @default false
     */
    disableExtendRowFullWidth?: boolean;
    /**
     * The order of the sorting sequence.
     * @default ['asc', 'desc', null]
     */
    sortingOrder: SortDirection[];
    /**
     * If `true`, pagination is enabled.
     * @default false
     */
    pagination?: boolean;
    /**
     * Set the number of rows in one page.
     * @default 100
     */
    pageSize?: number;
    /**
     * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
     * @default false
     */
    autoPageSize?: boolean;
    /**
     * Select the pageSize dynamically using the component UI.
     * @default [25, 50, 100]
     */
    rowsPerPageOptions?: number[];
    /**
     * Pagination can be processed on the server or client-side.
     * Set it to 'client' if you would like to handle the pagination on the client-side.
     * Set it to 'server' if you would like to handle the pagination on the server-side.
     */
    paginationMode?: FeatureMode;
    /**
     * Set the total number of rows, if it is different than the length of the value `rows` prop.
     */
    rowCount?: number;
    /**
     * Set the current page.
     * @default 1
     */
    page?: number;
    /**
     * Sorting can be processed on the server or client-side.
     * Set it to 'client' if you would like to handle sorting on the client-side.
     * Set it to 'server' if you would like to handle sorting on the server-side.
     */
    sortingMode?: FeatureMode;
    /**
     * If `true`, the footer component is hidden.
     * @default false
     */
    hideFooter?: boolean;
    /**
     * If `true`, the row count in the footer is hidden.
     * @default false
     */
    hideFooterRowCount?: boolean;
    /**
     * If `true`, the selected row count in the footer is hidden.
     * @default false
     */
    hideFooterSelectedRowCount?: boolean;
    /**
     * If `true`, the pagination component in the footer is hidden.
     * @default false
     */
    hideFooterPagination?: boolean;
    /**
     * If `true`, the grid get a first column with a checkbox that allows to select rows.
     * @default false
     */
    checkboxSelection?: boolean;
    /**
     * If `true`, the selection on click on a row or cell is disabled.
     * @default false
     */
    disableSelectionOnClick?: boolean;
    /**
     * Pass a custom logger in the components that implements the [[Logger]] interface.
     * @default null
     */
    logger?: Logger;
    /**
     * Allows to pass the logging level or false to turn off logging.
     * @default debug
     */
    logLevel?: string | false;
    /**
     * Set the sort model of the grid.
     */
    sortModel?: SortModel;
    /**
     * Callback fired when a click event comes from a cell element.
     * @param param With all properties from [[CellParams]].
     */
    onCellClick?: (param: CellParams) => void;
    /**
     * Callback fired when a hover event comes from a cell element.
     * @param param With all properties from [[CellParams]].
     */
    onCellHover?: (param: CellParams) => void;
    /**
     * Callback fired when a click event comes from a row container element.
     * @param param With all properties from [[RowParams]].
     */
    onRowClick?: (param: RowParams) => void;
    /**
     * Callback fired when a hover event comes from a row container element.
     * @param param With all properties from [[RowParams]].
     */
    onRowHover?: (param: RowParams) => void;
    /**
     * Callback fired when one row is selected.
     * @param param With all properties from [[RowSelectedParams]].
     */
    onRowSelected?: (param: RowSelectedParams) => void;
    /**
     * Callback fired when the selection state of one or multiple rows changes.
     * @param param With all properties from [[SelectionChangeParams]].
     */
    onSelectionChange?: (param: SelectionChangeParams) => void;
    /**
     * Callback fired when a click event comes from a column header element.
     * @param param With all properties from [[ColParams]].
     */
    onColumnHeaderClick?: (param: ColParams) => void;
    /**
     * Callback fired when the sort model changes before a column is sorted.
     * @param param With all properties from [[SortModelParams]].
     */
    onSortModelChange?: (params: SortModelParams) => void;
    /**
     * Callback fired when the current page has changed.
     * @param param With all properties from [[PageChangeParams]].
     */
    onPageChange?: (param: PageChangeParams) => void;
    /**
     * Callback fired when the page size has changed.
     * @param param With all properties from [[PageChangeParams]].
     */
    onPageSizeChange?: (param: PageChangeParams) => void;
    /**
     * Callback fired when an exception is thrown in the grid, or when the `showError` API method is called.
     */
    onError?: (args: any) => void;
    /**
     * Set of icons used in the grid.
     */
    icons: IconsOptions;
    /**
     * Extend native column types with your new column types.
     */
    columnTypes: ColumnTypesRecord;
}
/**
 * The default [[GridOptions]] object that will be used to merge with the 'options' passed in the react component prop.
 */
declare const DEFAULT_GRID_OPTIONS: GridOptions;

declare type SelectionState = Record<RowId, boolean>;

/**
 * The size of a container.
 */
interface ElementSize {
    /**
     * The height of a container or HTMLElement.
     */
    height: number;
    /**
     * The width of a container or HTMLElement.
     */
    width: number;
}

interface ScrollBarState {
    /**
     * Indicates if a vertical scrollbar is visible.
     */
    hasScrollY: boolean;
    /**
     * Indicates if an horizontal scrollbar is visible.
     */
    hasScrollX: boolean;
    /**
     * The scrollbar size.
     */
    scrollBarSize: {
        x: number;
        y: number;
    };
}
/**
 * the size of the container holding the set of rows visible to the user.
 */
declare type ViewportSizeState = ElementSize;
/**
 * The set of container properties calculated on resize of the grid.
 */
interface ContainerProps {
    /**
     * Our rendering zone constitute the maximum number of rows that will be rendered at any given time in the grid.
     */
    renderingZonePageSize: number;
    /**
     * The number of rows that fit in the viewport.
     */
    viewportPageSize: number;
    /**
     * The number of rows allocated for the rendered zone.
     */
    virtualRowsCount: number;
    /**
     * The last page number.
     */
    lastPage: number;
    /**
     * The total element size required to render the set of rows including scrollbars.
     */
    totalSizes: ElementSize;
    /**
     * The viewport size including scrollbars.
     */
    windowSizes: ElementSize;
    /**
     * The size of the container containing all the rendered rows.
     */
    renderingZone: ElementSize;
    /**
     * The total Element size required to render the full set of rows minus the scrollbars.
     */
    dataContainerSizes: ElementSize;
}

interface ScrollParams {
    left: number;
    top: number;
}
declare type ScrollFn = (v: ScrollParams) => void;

/**
 * The object containing the column properties of the rendering state.
 */
interface RenderColumnsProps {
    /**
     * The column index of the first rendered column.
     */
    firstColIdx: number;
    /**
     * The column index of the last rendered column.
     */
    lastColIdx: number;
    /**
     * The left empty width required to position the viewport at the beginning of the first rendered column.
     */
    leftEmptyWidth: number;
    /**
     * The right empty width limit the position the viewport to the end of the last rendered column.
     */
    rightEmptyWidth: number;
}
/**
 * The object containing the row properties of the rendering state.
 */
interface RenderRowProps {
    /**
     * The rendering zone page calculated with the scroll position
     */
    page: number;
    /**
     * The first rendered row in the rendering zone
     */
    firstRowIdx: number;
    /**
     * The last rendered row in the rendering zone
     */
    lastRowIdx: number;
}
/**
 * The object containing the pagination properties of the rendering state.
 */
interface RenderPaginationProps {
    /**
     * The current page if pagination is enabled.
     */
    paginationCurrentPage?: number;
    /**
     * The current page size if pagination is enabled.
     */
    pageSize?: number;
}
/**
 * The full rendering state.
 */
declare type RenderContextProps = RenderColumnsProps & RenderRowProps & RenderPaginationProps;

interface InternalRenderingState {
    virtualPage: number;
    virtualRowsCount: number;
    renderContext: Partial<RenderContextProps> | null;
    realScroll: ScrollParams;
    renderingZoneScroll: ScrollParams;
    renderedSizes: ContainerProps | null;
}
declare const getInitialRenderingState: () => InternalRenderingState;

interface KeyboardState {
    cell: CellIndexCoordinates | null;
    isMultipleKeyPressed: boolean;
}

interface PaginationState {
    page: number;
    pageCount: number;
    pageSize: number;
    rowCount: number;
    paginationMode: FeatureMode;
}
declare const SET_PAGE_ACTION = "SET_PAGE_ACTION";
declare const SET_PAGESIZE_ACTION = "SET_PAGESIZE_ACTION";
declare const SET_PAGINATION_MODE_ACTION = "SET_PAGINATION_MODE_ACTION";
declare const SET_ROWCOUNT_ACTION = "SET_ROWCOUNT_ACTION";
declare type SetPageAction = {
    type: typeof SET_PAGE_ACTION;
    payload: {
        page: number;
    };
};
declare type SetPageSizeAction = {
    type: typeof SET_PAGESIZE_ACTION;
    payload: {
        pageSize: number;
    };
};
declare type SetPaginationModeAction = {
    type: typeof SET_PAGINATION_MODE_ACTION;
    payload: {
        paginationMode: FeatureMode;
    };
};
declare type SetRowCountAction = {
    type: typeof SET_ROWCOUNT_ACTION;
    payload: {
        totalRowCount: number;
    };
};
declare type PaginationActions = SetPageAction | SetPageSizeAction | SetPaginationModeAction | SetRowCountAction;
declare function setPageActionCreator(page: number): SetPageAction;
declare function setPageSizeActionCreator(pageSize: number): SetPageSizeAction;
declare function setPaginationModeActionCreator(payload: {
    paginationMode: any;
}): SetPaginationModeAction;
declare function setRowCountActionCreator(payload: {
    totalRowCount: number;
}): SetRowCountAction;
declare const getPageCount: (pageSize: number | undefined, rowsCount: number) => number;
declare const setPageStateUpdate: (state: PaginationState, { page }: {
    page: number;
}) => PaginationState;
declare const setPageSizeStateUpdate: (state: PaginationState, payload: {
    pageSize: number;
}) => PaginationState;
declare const setRowCountStateUpdate: (state: any, payload: any) => PaginationState;
declare const INITIAL_PAGINATION_STATE: PaginationState;
declare const paginationReducer: (state: PaginationState, action: PaginationActions) => PaginationState;

interface InternalRowsState {
    idRowsLookup: Record<RowId, RowModel>;
    allRows: RowId[];
    totalRowCount: number;
}
declare const getInitialRowState: () => InternalRowsState;

interface SortingState {
    sortedRows: RowId[];
    sortModel: SortModel;
}
declare function getInitialSortingState(): SortingState;

interface ColumnReorderState {
    dragCol: string;
}
declare function getInitialColumnReorderState(): ColumnReorderState;

interface GridState {
    rows: InternalRowsState;
    pagination: PaginationState;
    options: GridOptions;
    isScrolling: boolean;
    columns: InternalColumns;
    columnReorder: ColumnReorderState;
    rendering: InternalRenderingState;
    containerSizes: ContainerProps | null;
    viewportSizes: ViewportSizeState;
    scrollBar: ScrollBarState;
    sorting: SortingState;
    keyboard: KeyboardState;
    selection: SelectionState;
}
declare const getInitialState: () => GridState;

interface StateApi {
    /**
     * Property that contains the whole state of the grid.
     */
    state: GridState;
    /**
     * allows to get the whole state of the grid if stateId is null or to get a part of the state if stateId has a value.
     */
    getState: <T>(stateId?: string) => T;
    /**
     * Allows forcing the grid to rerender after a state update.
     */
    forceUpdate: Dispatch<any>;
}

/**
 * The virtualization API interface that is available in the grid [[apiRef]].
 */
interface VirtualizationApi {
    /**
     * Trigger the grid viewport to scroll to the position in pixel.
     * @param params
     */
    scroll: (params: Partial<ScrollParams>) => void;
    /**
     * Trigger the grid viewport to scroll to a row of x y indexes.
     * @param params
     * @returns boolean Return if the index was outside of the viewport and the grid has to scroll to reach the target.
     */
    scrollToIndexes: (params: CellIndexCoordinates) => boolean;
    /**
     * Check if a column at index is currently visible in the viewport.
     * @param colIndex
     */
    isColumnVisibleInWindow: (colIndex: number) => boolean;
    /**
     * Get the current containerProps.
     */
    getContainerPropsState: () => ContainerProps | null;
    /**
     * Get the current renderContext.
     */
    getRenderContextState: () => Partial<RenderContextProps> | undefined;
    /**
     * Refresh the viewport cells according to the scroll positions
     * @param forceRender
     */
    updateViewport: (forceRender?: boolean) => void;
}

declare type Listener = (...args: any[]) => void;
declare class EventEmitter {
    maxListeners: number;
    warnOnce: boolean;
    events: {
        [key: string]: Listener[];
    };
    on(eventName: string, listener: Listener): void;
    removeListener(eventName: string, listener: Listener): void;
    removeAllListeners(eventName?: string): void;
    emit(eventName: string, ...args: any[]): void;
    once(eventName: string, listener: Listener): void;
}

/**
 * The core API interface that is available in the grid [[apiRef]].
 */
interface CoreApi extends EventEmitter {
    /**
     * Property that comes true when the grid has its EventEmitter initialised.
     */
    isInitialised: boolean;
    /**
     * Allows to register a handler for an event.
     * @param event
     * @param handler
     * @returns Unsubscribe Function
     */
    subscribeEvent: (event: string, handler: (param: any) => void) => () => void;
    /**
     * Allows to emit an event.
     * @param name
     * @param args
     */
    publishEvent: (name: string, ...args: any[]) => void;
    /**
     * Display the error overlay component.
     */
    showError: (props: any) => void;
    /**
     * Store the request animation timer, that coordinates all requestAnimationFrame().
     */
    rafTimer: number;
}

/**
 * The events API interface that is available in the grid [[apiRef]].
 */
interface EventsApi {
    /**
     * The react ref of the grid root container div element.
     */
    rootElementRef?: RefObject<HTMLDivElement>;
    /**
     * Add a handler that will be triggered when the component unmount.
     * @param handler
     */
    onUnmount: (handler: (param: any) => void) => void;
    /**
     * Add a handler that will be triggered when the component resize.
     * @param handler
     */
    onResize: (handler: (param: any) => void) => void;
    /**
     * Trigger a resize of the component, and recalculation of width and height.
     * @param handler
     */
    resize: () => void;
}

/**
 * The full grid API.
 */
declare type GridApi = CoreApi & StateApi & EventsApi & RowApi & ColumnApi & ColumnReorderApi & SelectionApi & SortApi & VirtualizationApi & PaginationApi;

/**
 * The apiRef component prop type.
 */
declare type ApiRef = MutableRefObject<GridApi>;

declare const ApiContext: Context<ApiRef | undefined>;

interface AutoSizerSize {
    height: number;
    width: number;
}
interface AutoSizerProps extends Omit<HTMLAttributes<HTMLDivElement>, 'children'> {
    /**
     * Function responsible for rendering children.
     */
    children: (size: AutoSizerSize) => ReactNode;
    /**
     * Default height to use for initial render; useful for SSR.
     * @default null
     */
    defaultHeight?: number;
    /**
     * Default width to use for initial render; useful for SSR.
     * @default null
     */
    defaultWidth?: number;
    /**
     * If `true`, disable dynamic :height property.
     * @default false
     */
    disableHeight?: boolean;
    /**
     * If `true`, disable dynamic :width property.
     * @default false
     */
    disableWidth?: boolean;
    /**
     * Nonce of the inlined stylesheet for Content Security Policy.
     */
    nonce?: string;
    /**
     * Callback to be invoked on-resize.
     */
    onResize?: (size: AutoSizerSize) => void;
}
declare const AutoSizer: ForwardRefExoticComponent<AutoSizerProps & RefAttributes<HTMLDivElement>>;

declare const checkboxSelectionColDef: ColDef;

declare const getColDef: (columnTypes: any, type: ColType | undefined) => any;

declare function dateFormatter({ value }: {
    value: CellValue;
}): string | number | boolean | object | null | undefined;
declare function dateTimeFormatter({ value }: {
    value: CellValue;
}): string | number | boolean | object | null | undefined;
declare const DATE_COL_DEF: ColTypeDef;
declare const DATETIME_COL_DEF: ColTypeDef;

declare const NUMERIC_COL_DEF: ColTypeDef;

declare const STRING_COL_DEF: ColTypeDef;

declare const DEFAULT_COL_TYPE_KEY = "__default__";
declare const DEFAULT_COLUMN_TYPES: ColumnTypesRecord;

/**
 * The ref type of the inner grid root container.
 */
declare type RootContainerRef = RefObject<HTMLDivElement>;

/**
 * Object passed as React prop in the component override.
 */
interface ComponentProps {
    /**
     * The object containing all pagination details in [[PaginationState]].
     */
    pagination: PaginationState;
    /**
     * The full set of rows.
     */
    rows: Rows;
    /**
     * The full set of columns.
     */
    columns: Columns;
    /**
     * The full set of options.
     */
    options: GridOptions;
    /**
     * ApiRef that let you manipulate the grid.
     */
    api: ApiRef;
    /**
     * The ref of the inner div Element of the grid.
     */
    rootElement: RootContainerRef;
}

/**
 * Grid components React prop interface containing all the overridable components.
 */
interface GridComponentOverridesProp {
    /**
     * Pagination component rendered in the grid footer by default.
     */
    pagination?: ElementType<ComponentProps>;
    /**
     * Loading overlay component rendered when the grid is in a loading state.
     */
    loadingOverlay?: ElementType<ComponentProps>;
    /**
     * No rows overlay component rendered when the grid has no rows.
     */
    noRowsOverlay?: ElementType<ComponentProps>;
    /**
     * Footer component rendered at the bottom of the grid viewport.
     */
    footer?: ElementType<ComponentProps>;
    /**
     * Header component rendered above the grid column header bar.
     */
    header?: ElementType<ComponentProps>;
    /**
     * Error overlay component rendered above the grid when an error is caught.
     */
    errorOverlay?: ElementType<ComponentProps>;
}

interface GridCellProps {
    field?: string;
    value?: CellValue;
    formattedValue?: CellValue;
    width: number;
    showRightBorder?: boolean;
    hasFocus?: boolean;
    align?: Alignement;
    cssClass?: string;
    tabIndex?: number;
    colIndex?: number;
    rowIndex?: number;
}
declare const Cell: FC<GridCellProps>;
declare const LeftEmptyCell: FC<{
    width?: number;
}>;
declare const RightEmptyCell: FC<{
    width?: number;
}>;

declare const HeaderCheckbox: FC<ColParams>;
declare const CellCheckboxRenderer: FC<CellParams>;

interface ColumnHeaderItemProps {
    colIndex: number;
    column: ColDef;
    isDragging: boolean;
    isResizing: boolean;
    sortDirection: SortDirection;
    sortIndex?: number;
    options: GridOptions;
    separatorProps: HTMLAttributes<HTMLDivElement>;
}
declare const ColumnHeaderItem: {
    ({ column, colIndex, isDragging, isResizing, separatorProps, sortDirection, sortIndex, options, }: ColumnHeaderItemProps): JSX.Element;
    displayName: string;
};

interface ColumnHeaderSeparatorProps extends HTMLAttributes<HTMLDivElement> {
    resizable: boolean;
    resizing: boolean;
}
declare const ColumnHeaderSeparator: NamedExoticComponent<ColumnHeaderSeparatorProps>;

interface ColumnHeaderSortIconProps {
    direction: SortDirection;
    index: number | undefined;
    hide?: boolean;
}
declare const ColumnHeaderSortIcon: FC<ColumnHeaderSortIconProps>;

interface ColumnHeaderTitleProps {
    label: string;
    columnWidth: number;
    description?: string;
}
declare function ColumnHeaderTitle(props: ColumnHeaderTitleProps): JSX.Element;

interface ColumnHeadersItemCollectionProps {
    columns: Columns;
    separatorProps: HTMLAttributes<HTMLDivElement>;
}
declare const ColumnHeaderItemCollection: FC<ColumnHeadersItemCollectionProps>;
interface ColumnsHeaderProps {
    columns: Columns;
    hasScrollX: boolean;
    separatorProps: HTMLAttributes<HTMLDivElement>;
    renderCtx: Partial<RenderContextProps> | null;
}
declare const ColumnsHeader: ForwardRefExoticComponent<ColumnsHeaderProps & RefAttributes<HTMLDivElement>>;

interface DefaultFooterProps {
    paginationComponent: ReactNode;
}
declare const DefaultFooter: ForwardRefExoticComponent<DefaultFooterProps & RefAttributes<HTMLDivElement>>;

declare const ArrowUpwardIcon: OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;
declare const ArrowDownwardIcon: OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;
declare const SeparatorIcon: OverridableComponent<import("@material-ui/core").SvgIconTypeMap<{}, "svg">>;

declare function LoadingOverlay(): JSX.Element;

declare function NoRowMessage(): JSX.Element;

declare const OptionsContext: Context<GridOptions>;

interface PaginationComponentProps {
    pageCount: number;
    setPage: (pageCount: number) => void;
    setPageSize: (pageSize: number) => void;
    currentPage: number;
    rowCount: number;
    pageSize: number;
    rowsPerPageOptions?: number[];
}
declare const Pagination: FC<PaginationComponentProps>;

declare const RenderContext: Context<Partial<RenderContextProps> | null>;

declare type WithChildren = {
    children?: ReactNode;
};
declare const RenderingZone: ForwardRefExoticComponent<ElementSize & WithChildren & RefAttributes<HTMLDivElement>>;

interface RowCellsProps {
    columns: Columns;
    domIndex: number;
    extendRowFullWidth: boolean;
    firstColIdx: number;
    hasScroll: {
        y: boolean;
        x: boolean;
    };
    lastColIdx: number;
    row: RowModel;
    rowIndex: number;
    scrollSize: number;
    showCellRightBorder: boolean;
    cellFocus: CellIndexCoordinates | null;
}
declare const RowCells: FC<RowCellsProps>;

declare const RowCount: FC<{
    rowCount: number;
}>;

interface RowProps {
    id: RowId;
    selected: boolean;
    className: string;
    rowIndex: number;
}
declare const Row: FC<RowProps>;

interface SelectedRowCountProps {
    selectedRowCount: number;
}
declare function SelectedRowCount(props: SelectedRowCountProps): JSX.Element | null;

declare const StickyContainer: FC<ElementSize>;

declare const GridColumnsContainer: ForwardRefExoticComponent<HTMLAttributes<HTMLDivElement> & {
    height: number;
} & RefAttributes<HTMLDivElement>>;

declare type GridDataContainerProps = HTMLAttributes<HTMLDivElement>;
declare const GridDataContainer: ForwardRefExoticComponent<GridDataContainerProps & RefAttributes<HTMLDivElement>>;

declare type GridFooterProps = HTMLAttributes<HTMLDivElement>;
declare const GridFooter: ForwardRefExoticComponent<GridFooterProps & RefAttributes<HTMLDivElement>>;

declare type GridOverlayProps = HTMLAttributes<HTMLDivElement>;
declare function GridOverlay(props: GridOverlayProps): JSX.Element;

declare type GridRootProps = HTMLAttributes<HTMLDivElement>;
declare const GridRoot: ForwardRefExoticComponent<GridRootProps & RefAttributes<HTMLDivElement>>;

declare type GridWindowProps = HTMLAttributes<HTMLDivElement>;
declare const GridWindow: ForwardRefExoticComponent<GridWindowProps & RefAttributes<HTMLDivElement>>;

declare type ViewportType = ForwardRefExoticComponent<RefAttributes<HTMLDivElement>>;
declare const containerSizesSelector: (state: GridState) => ContainerProps | null;
declare const viewportSizesSelector: (state: GridState) => ElementSize;
declare const scrollBarSizeSelector: (state: GridState) => ScrollBarState;
declare const Viewport: ViewportType;

interface WatermarkProps {
    licenseStatus: string;
}
declare const Watermark: FC<WatermarkProps>;

interface ScrollAreaProps {
    scrollDirection: 'left' | 'right';
}
declare const ScrollArea: NamedExoticComponent<ScrollAreaProps>;

declare const RESIZE = "resize";
declare const CLICK = "click";
declare const MOUSE_HOVER = "mouseover";
declare const FOCUS_OUT = "focusout";
declare const KEYDOWN = "keydown";
declare const KEYUP = "keyup";
declare const SCROLL = "scroll";
declare const DRAGEND = "dragend";
declare const COMPONENT_ERROR = "componentError";
declare const UNMOUNT = "unmount";
declare const GRID_FOCUS_OUT = "gridFocusOut";
declare const CELL_CLICK = "cellClick";
declare const CELL_HOVER = "cellHover";
declare const ROW_CLICK = "rowClick";
declare const ROW_HOVER = "rowHover";
declare const ROW_SELECTED = "rowSelected";
declare const SELECTION_CHANGED = "selectionChange";
declare const COLUMN_HEADER_CLICK = "columnClick";
declare const COLUMN_HEADER_HOVER = "columnHeaderHover";
declare const PAGE_CHANGED = "pageChange";
declare const PAGESIZE_CHANGED = "pageSizeChange";
declare const SCROLLING_START = "scrolling:start";
declare const SCROLLING = "scrolling";
declare const SCROLLING_STOP = "scrolling:stop";
declare const COL_RESIZE_START = "colResizing:start";
declare const COL_RESIZE_STOP = "colResizing:stop";
declare const COL_REORDER_START = "colReordering:dragStart";
declare const COL_REORDER_DRAG_OVER_HEADER = "colReordering:dragOverHeader";
declare const COL_REORDER_DRAG_OVER = "colReordering:dragOver";
declare const COL_REORDER_DRAG_ENTER = "colReordering:dragEnter";
declare const COL_REORDER_STOP = "colReordering:dragStop";
declare const ROWS_UPDATED = "rowsUpdated";
declare const COLUMNS_UPDATED = "columnsUpdated";
declare const SORT_MODEL_CHANGE = "sortModelChange";
declare const MULTIPLE_KEY_PRESS_CHANGED = "multipleKeyPressChange";

declare const CELL_CSS_CLASS = "MuiDataGrid-cell";
declare const ROW_CSS_CLASS = "MuiDataGrid-row";
declare const HEADER_CELL_CSS_CLASS = "MuiDataGrid-colCell";
declare const HEADER_CELL_SEPARATOR_RESIZABLE_CSS_CLASS = "MuiDataGrid-columnSeparatorResizable";
declare const DATA_CONTAINER_CSS_CLASS = "data-container";
declare const HEADER_CELL_DROP_ZONE_CSS_CLASS = "MuiDataGrid-colCell-dropZone";
declare const HEADER_CELL_DRAGGING_CSS_CLASS = "MuiDataGrid-colCell-dragging";

declare const columnsSelector: (state: GridState) => InternalColumns;
declare const visibleColumnsSelector: OutputSelector<GridState, Columns, (res: InternalColumns) => Columns>;
declare const visibleColumnsLengthSelector: OutputSelector<GridState, number, (res: InternalColumns) => number>;
declare const columnsTotalWidthSelector: OutputSelector<GridState, number, (res: InternalColumns) => number>;

declare function useColumns(columns: Columns, apiRef: ApiRef): InternalColumns;

declare const useGridApi: (apiRef: ApiRef) => GridApi;

declare const useGridReducer: <State, Action>(apiRef: ApiRef, stateId: any, reducer: Reducer<State, Action>, initialState: State) => {
    gridState: GridState;
    dispatch: (args: any) => void;
    gridApi: GridApi;
};

declare const useGridSelector: <State>(apiRef: ApiRef | undefined, selector: (state: any) => State) => State;

declare const useGridState: (apiRef: ApiRef) => [GridState, (stateUpdaterFn: (oldState: GridState) => GridState) => void, () => void];

declare const paginationSelector: (state: any) => PaginationState;

interface PaginationProps {
    page: number;
    pageCount: number;
    pageSize: number;
    rowCount: number;
    setPage: (page: number) => void;
    setPageSize: (pageSize: number) => void;
}

declare const usePagination: (apiRef: ApiRef) => PaginationProps;

declare const rowsStateSelector: (state: GridState) => InternalRowsState;
declare const rowCountSelector: OutputSelector<GridState, number, (res: InternalRowsState) => number>;
declare const rowsLookupSelector: OutputSelector<GridState, Record<RowId, RowModel>, (res: InternalRowsState) => Record<RowId, RowModel>>;
declare const unorderedRowModelsSelector: OutputSelector<GridState, RowModel[], (res: InternalRowsState) => RowModel[]>;

declare function convertRowsPropToState({ rows, totalRowCount, }: {
    rows: RowsProp;
    totalRowCount?: number;
}): InternalRowsState;
declare const useRows: (rows: RowsProp, apiRef: ApiRef) => void;

declare const selectionStateSelector: (state: GridState) => Record<RowId, boolean>;
declare const selectedRowsCountSelector: OutputSelector<GridState, number, (res: Record<import("../../..").RowId, boolean>) => number>;

declare const useSelection: (apiRef: ApiRef) => void;

declare const sortedRowIdsSelector: OutputSelector<GridState, RowId[], (res: SortingState) => RowId[]>;
declare const sortedRowsSelector: OutputSelector<GridState, RowModel[], (res1: RowId[], res2: Record<RowId, RowModel>, res3: RowModel[]) => RowModel[]>;
declare const sortModelSelector: OutputSelector<GridState, SortModel, (res: SortingState) => SortModel>;
declare type SortColumnLookup = Record<string, {
    sortDirection: SortDirection;
    sortIndex?: number;
}>;
declare const sortColumnLookupSelector: OutputSelector<GridState, Record<string, {
    sortDirection: SortDirection;
    sortIndex?: number | undefined;
}>, (res1: SortingState, res2: SortModel) => Record<string, {
    sortDirection: SortDirection;
    sortIndex?: number | undefined;
}>>;

declare const useSorting: (apiRef: ApiRef) => void;

declare const keyboardStateSelector: (state: GridState) => KeyboardState;
declare const keyboardCellSelector: OutputSelector<GridState, CellIndexCoordinates | null, (res: KeyboardState) => CellIndexCoordinates | null>;
declare const keyboardMultipleKeySelector: OutputSelector<GridState, boolean, (res: KeyboardState) => boolean>;

declare const useKeyboard: (gridRootRef: RefObject<HTMLDivElement>, apiRef: ApiRef) => void;

declare type UpdateRenderedColsFnType = (containerProps: ContainerProps | null, scrollLeft: number) => boolean;
declare type UseVirtualColumnsReturnType = [MutableRefObject<RenderColumnsProps | null>, UpdateRenderedColsFnType];
declare const useVirtualColumns: (options: GridOptions, apiRef: ApiRef) => UseVirtualColumnsReturnType;

declare type UseVirtualRowsReturnType = Partial<RenderContextProps> | null;
declare const useVirtualRows: (colRef: MutableRefObject<HTMLDivElement | null>, windowRef: MutableRefObject<HTMLDivElement | null>, renderingZoneRef: MutableRefObject<HTMLDivElement | null>, apiRef: ApiRef) => UseVirtualRowsReturnType;

/**
 * Hook that instantiate an ApiRef to pass in component prop.
 */
declare function useApiRef(apiRefProp?: ApiRef): ApiRef;

declare const useComponents: (componentOverrides: GridComponentOverridesProp | undefined, apiRef: ApiRef, gridRootRef: RootContainerRef) => {
    headerComponent: ReactElement<ComponentProps, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)> | null;
    footerComponent: ReactElement<ComponentProps, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)> | null;
    loadingComponent: JSX.Element;
    noRowsComponent: JSX.Element;
    paginationComponent: ReactElement<ComponentProps, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)> | null;
    renderError: (props: any) => JSX.Element;
};

declare const columnReorderSelector: (state: GridState) => ColumnReorderState;
declare const columnReorderDragColSelector: OutputSelector<GridState, string, (res: ColumnReorderState) => string>;

declare const useColumnReorder: (apiRef: ApiRef) => void;

declare const useColumnResize: (columnsRef: RefObject<HTMLDivElement>, apiRef: ApiRef) => {
    onMouseDown: (event: MouseEvent<HTMLDivElement>) => void;
};

declare function useApi(gridRootRef: RefObject<HTMLDivElement>, apiRef: ApiRef): boolean;

declare function useApiEventHandler(apiRef: ApiRef, eventName: string, handler?: (args: any) => void): void;

declare function useApiMethod(apiRef: ApiRef, apiMethods: Partial<GridApi>, apiName: string): void;

declare const useContainerProps: (windowRef: RefObject<HTMLDivElement>, apiRef: ApiRef) => void;

declare const useNativeEventListener: (apiRef: ApiRef, ref: MutableRefObject<HTMLDivElement | null> | (() => Element | undefined | null), eventName: string, handler?: ((event: Event) => any) | undefined, options?: AddEventListenerOptions | undefined) => void;

declare function useScrollFn(renderingZoneElementRef: RefObject<HTMLDivElement>, columnHeadersElementRef: RefObject<HTMLDivElement>): [ScrollFn];

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
declare function isEqual(value: any, other: any): boolean;

interface DebouncedFunction extends Function {
    cancel: () => void;
    flush: () => void;
}
declare function isDate(value: any): value is Date;
declare function isArray(value: any): value is Array<any>;
declare function isString(value: any): value is string;
declare function isNumber(value: any): value is number;
declare function isFunction(value: any): value is Function;
declare function isObject(value: any): value is Record<string, any>;

declare const nextSortDirection: (sortingOrder: SortDirection[], current?: SortDirection) => SortDirection;
declare const isDesc: (direction: SortDirection) => boolean;
declare const nillComparer: (v1: CellValue, v2: CellValue) => number | null;
declare const stringNumberComparer: ComparatorFn;
declare const numberComparer: ComparatorFn;
declare const dateComparer: (v1: CellValue, v2: CellValue) => number;

declare function isOverflown(element: Element): boolean;
declare function findParentElementFromClassName(elem: Element, className: string): Element | null;
declare function isCell(elem: Element | null): boolean;
declare function isHeaderCell(elem: Element): boolean;
declare function getIdFromRowElem(rowEl: Element): string;
declare function getFieldFromHeaderElem(colCellEl: Element): string;
declare function findHeaderElementFromField(elem: Element, field: string): Element | null;
declare function findCellElementsFromCol(col: HTMLElement): NodeListOf<Element> | null;
declare function findGridRootFromCurrent(elem: Element): HTMLDivElement | null;
declare function findDataContainerFromCurrent(elem: Element): HTMLDivElement | null;
declare function getCellElementFromIndexes(root: Element, { colIndex, rowIndex }: CellIndexCoordinates): HTMLDivElement;

declare function classnames(...args: any[]): string;

declare const MULTIPLE_SELECTION_KEYS: string[];
declare const isMultipleKey: (code: string) => boolean;
declare const isTabKey: (code: string) => boolean;
declare const isSpaceKey: (code: string) => boolean;
declare const isArrowKeys: (code: string) => boolean;
declare const isHomeOrEndKeys: (code: string) => boolean;
declare const isPageKeys: (code: string) => boolean;
declare const isNavigationKey: (code: string) => boolean;

declare function mergeColTypes(defaultColumnTypes: ColumnTypesRecord, optionsColTypes: ColumnTypesRecord): ColumnTypesRecord;
declare function removeUndefinedProps(options: Object): {
    constructor: Function;
    toString(): string;
    toLocaleString(): string;
    valueOf(): Object;
    hasOwnProperty(v: string | number | symbol): boolean;
    isPrototypeOf(v: Object): boolean;
    propertyIsEnumerable(v: string | number | symbol): boolean;
    should: Chai.Assertion;
};
declare function mergeOptions(defaultOptions: any, options?: any): any;

declare function buildCellParams({ element, value, rowIndex, rowModel, colDef, api, }: {
    rowModel: RowModel;
    colDef: ColDef;
    rowIndex?: number;
    value: CellValue;
    api: GridApi;
    element?: HTMLElement;
}): CellParams;
declare function buildRowParams({ element, rowIndex, rowModel, api, }: {
    rowModel: RowModel;
    colDef: ColDef;
    rowIndex: number;
    api: GridApi;
    element?: HTMLElement;
}): RowParams;

/**
 * Partial set of [[GridOptions]].
 */
declare type GridOptionsProp = Partial<GridOptions>;
/**
 * The grid component react props interface.
 */
interface GridComponentProps extends GridOptionsProp {
    /**
     * Set of rows of type [[RowsProp]].
     */
    rows: RowsProp;
    /**
     * Set of columns of type [[Columns]].
     */
    columns: Columns;
    /**
     * Overrideable components.
     */
    components?: GridComponentOverridesProp;
    /**
     * The ref object that allows grid manipulation. Can be instantiated with [[useApiRef()]].
     */
    apiRef?: ApiRef;
    /**
     * If `true`, a  loading overlay is displayed.
     */
    loading?: boolean;
    /**
     * @ignore
     */
    className?: string;
    /**
     * @internal enum
     */
    licenseStatus: string;
    /**
     * An error that will turn the grid into its error state and display the error component.
     */
    error?: any;
}

declare const GridComponent: ForwardRefExoticComponent<GridComponentProps & RefAttributes<HTMLDivElement>>;

declare type DataGridProps = Omit<GridComponentProps, 'disableColumnResize' | 'disableColumnReorder' | 'disableMultipleColumnsSorting' | 'disableMultipleSelection' | 'licenseStatus' | 'apiRef' | 'options' | 'pagination'> & {
    disableColumnResize?: true;
    disableColumnReorder?: true;
    disableMultipleColumnsSorting?: true;
    disableMultipleSelection?: true;
    pagination?: true;
    apiRef?: undefined;
};
declare const DataGrid: MemoExoticComponent<ForwardRefExoticComponent<Pick<GridComponentProps, "autoHeight" | "rowHeight" | "headerHeight" | "scrollbarSize" | "columnBuffer" | "showCellRightBorder" | "showColumnRightBorder" | "disableExtendRowFullWidth" | "sortingOrder" | "pageSize" | "autoPageSize" | "rowsPerPageOptions" | "paginationMode" | "rowCount" | "page" | "sortingMode" | "hideFooter" | "hideFooterRowCount" | "hideFooterSelectedRowCount" | "hideFooterPagination" | "checkboxSelection" | "disableSelectionOnClick" | "logger" | "logLevel" | "sortModel" | "onCellClick" | "onCellHover" | "onRowClick" | "onRowHover" | "onRowSelected" | "onSelectionChange" | "onColumnHeaderClick" | "onSortModelChange" | "onPageChange" | "onPageSizeChange" | "onError" | "icons" | "columnTypes" | "rows" | "columns" | "components" | "loading" | "className" | "error"> & {
    disableColumnResize?: true | undefined;
    disableColumnReorder?: true | undefined;
    disableMultipleColumnsSorting?: true | undefined;
    disableMultipleSelection?: true | undefined;
    pagination?: true | undefined;
    apiRef?: undefined;
} & RefAttributes<HTMLDivElement>>>;

export { Alignement, ApiContext, ApiRef, ArrowDownwardIcon, ArrowUpwardIcon, AutoSizer, AutoSizerProps, AutoSizerSize, CELL_CLICK, CELL_CSS_CLASS, CELL_HOVER, CLICK, COLUMNS_UPDATED, COLUMN_HEADER_CLICK, COLUMN_HEADER_HOVER, COL_REORDER_DRAG_ENTER, COL_REORDER_DRAG_OVER, COL_REORDER_DRAG_OVER_HEADER, COL_REORDER_START, COL_REORDER_STOP, COL_RESIZE_START, COL_RESIZE_STOP, COMPONENT_ERROR, Cell, CellCheckboxRenderer, CellClassFn, CellClassNamePropType, CellClassParams, CellClassRules, CellIndexCoordinates, CellParams, CellValue, ColDef, ColParams, ColType, ColTypeDef, ColumnApi, ColumnHeaderItem, ColumnHeaderItemCollection, ColumnHeaderSeparator, ColumnHeaderSeparatorProps, ColumnHeaderSortIcon, ColumnHeaderSortIconProps, ColumnHeaderTitle, ColumnHeaderTitleProps, ColumnHeadersItemCollectionProps, ColumnLookup, ColumnReorderState, ColumnTypesRecord, Columns, ColumnsHeader, ColumnsHeaderProps, ColumnsMeta, ComparatorFn, ComponentProps, ContainerProps, CoreApi, DATA_CONTAINER_CSS_CLASS, DATETIME_COL_DEF, DATE_COL_DEF, DEFAULT_COLUMN_TYPES, DEFAULT_COL_TYPE_KEY, DEFAULT_GRID_OPTIONS, DRAGEND, DataGrid, DataGridProps, DebouncedFunction, DefaultFooter, DefaultFooterProps, ElementSize, EventsApi, FOCUS_OUT, FeatureMode, FeatureModeConstant, FieldComparatorList, GRID_FOCUS_OUT, GridApi, GridCellProps, GridColumnsContainer, GridComponent, GridComponentOverridesProp, GridComponentProps, GridDataContainer, GridFooter, GridOptions, GridOptionsProp, GridOverlay, GridRoot, GridState, GridWindow, HEADER_CELL_CSS_CLASS, HEADER_CELL_DRAGGING_CSS_CLASS, HEADER_CELL_DROP_ZONE_CSS_CLASS, HEADER_CELL_SEPARATOR_RESIZABLE_CSS_CLASS, HeaderCheckbox, INITIAL_PAGINATION_STATE, IconsOptions, InternalColumns, InternalRenderingState, InternalRowsState, KEYDOWN, KEYUP, KeyboardState, LeftEmptyCell, LoadingOverlay, Logger, MOUSE_HOVER, MULTIPLE_KEY_PRESS_CHANGED, MULTIPLE_SELECTION_KEYS, NUMERIC_COL_DEF, NativeColTypes, NoRowMessage, ObjectWithId, OptionsContext, PAGESIZE_CHANGED, PAGE_CHANGED, PageChangeParams, Pagination, PaginationActions, PaginationApi, PaginationComponentProps, PaginationState, RESIZE, ROWS_UPDATED, ROW_CLICK, ROW_CSS_CLASS, ROW_HOVER, ROW_SELECTED, RenderColumnsProps, RenderContext, RenderContextProps, RenderPaginationProps, RenderRowProps, RenderingZone, RightEmptyCell, RootContainerRef, Row, RowApi, RowCells, RowCount, RowData, RowId, RowModel, RowParams, RowProps, RowSelectedParams, Rows, RowsProp, SCROLL, SCROLLING, SCROLLING_START, SCROLLING_STOP, SELECTION_CHANGED, SORT_MODEL_CHANGE, STRING_COL_DEF, ScrollArea, ScrollBarState, ScrollFn, ScrollParams, SelectedRowCount, SelectionApi, SelectionChangeParams, SelectionState, SeparatorIcon, SortApi, SortColumnLookup, SortDirection, SortItem, SortModel, SortModelParams, SortingState, StateApi, StickyContainer, UNMOUNT, ValueFormatterParams, ValueGetterParams, Viewport, ViewportSizeState, VirtualizationApi, Watermark, WatermarkProps, buildCellParams, buildRowParams, checkboxSelectionColDef, classnames, columnReorderDragColSelector, columnReorderSelector, columnsSelector, columnsTotalWidthSelector, containerSizesSelector, convertRowsPropToState, createRowModel, dateComparer, dateFormatter, dateTimeFormatter, findCellElementsFromCol, findDataContainerFromCurrent, findGridRootFromCurrent, findHeaderElementFromField, findParentElementFromClassName, getCellElementFromIndexes, getColDef, getFieldFromHeaderElem, getIdFromRowElem, getInitialColumnReorderState, getInitialColumnsState, getInitialRenderingState, getInitialRowState, getInitialSortingState, getInitialState, getPageCount, isArray, isArrowKeys, isCell, isDate, isDesc, isEqual, isFunction, isHeaderCell, isHomeOrEndKeys, isMultipleKey, isNavigationKey, isNumber, isObject, isOverflown, isPageKeys, isSpaceKey, isString, isTabKey, keyboardCellSelector, keyboardMultipleKeySelector, keyboardStateSelector, mergeColTypes, mergeOptions, nextSortDirection, nillComparer, numberComparer, paginationReducer, paginationSelector, removeUndefinedProps, rowCountSelector, rowsLookupSelector, rowsStateSelector, scrollBarSizeSelector, selectedRowsCountSelector, selectionStateSelector, setPageActionCreator, setPageSizeActionCreator, setPageSizeStateUpdate, setPageStateUpdate, setPaginationModeActionCreator, setRowCountActionCreator, setRowCountStateUpdate, sortColumnLookupSelector, sortModelSelector, sortedRowIdsSelector, sortedRowsSelector, stringNumberComparer, unorderedRowModelsSelector, useApi, useApiEventHandler, useApiMethod, useApiRef, useColumnReorder, useColumnResize, useColumns, useComponents, useContainerProps, useGridApi, useGridReducer, useGridSelector, useGridState, useKeyboard, useLogger, useLoggerFactory, useNativeEventListener, usePagination, useRows, useScrollFn, useSelection, useSorting, useVirtualColumns, useVirtualRows, viewportSizesSelector, visibleColumnsLengthSelector, visibleColumnsSelector };
